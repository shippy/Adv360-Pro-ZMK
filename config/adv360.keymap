
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

// Layer definitions
#define BASE 0
#define MAC  1
#define FN   2
#define MOD  3
#define KPAD 4

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_screenshot {
            timeout-ms = <100>;
            // Q + W
            key-positions = <15 16>;
            bindings = <&kp LG(LS(N4))>;
            layers = <MAC>;
        };
    };

    behaviors {
      #include "custom_behaviors.dtsi"
      #include "macros.dtsi"
      #include "tap_dances.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO
      macro_ver: macro_ver {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp RET>;
      };
      #endif

    };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
    &kp EQUAL  &kp N1      &kp N2      &kp N3      &kp N4      &kp N5    &td_toggle_keypad_macos                                              &mo MOD            &kp N6     &kp N7     &kp N8     &kp N9       &kp N0         &kp MINUS
      &kp TAB  &kp Q       &kp W       &kp E       &kp R       &kp T     &td_cut_copy                                                         &td_select_undo    &kp Y      &kp U      &kp I      &kp O        &kp P          &kp BSLH
      &kp ESC  &hm LGUI A  &hm LALT S  &hm LCTRL D &hm LSHFT F &kp G     &kp LC(V)     &kp LSHIFT      &kp LCTRL       &kp RCTRL  &kp RSHIFT  &macro_cut_all     &kp H   &hm RSHFT J  &hm RCTRL K  &hm RALT L  &hm RGUI SEMI  &kp SQT
 &kp LEFT_ALT  &lp LC(Z) Z &lp LC(X) X &lp LC(C) C &lp LC(V) V &kp B                   &mt LGUI HOME   &mt RGUI PG_UP             &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp LEFT_GUI
       &mo FN  &kp GRAVE   &caps_word  &kp LEFT    &kp RIGHT   &kp BSPC  &kp DEL       &mt LALT END    &mt RALT PG_DN  &kp ENTER  &kp SPACE   &kp DOWN           &kp UP        &kp LBKT  &kp RBKT   &mo FN
            >;
        };

        layer_macos {
            bindings = <
 &trans  &trans       &trans     &trans      &trans       &trans &td_toggle_keypad_macos                                               &trans                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans       &trans     &trans      &trans       &trans &td_cut_copy_macos                                                    &td_select_undo_macos   &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &hm LCTRL A  &hm LALT S &hm LGUI D  &hm LSHFT F  &trans &kp LG(V)          &trans  &kp LGUI                &kp RGUI   &trans  &td_spotlight_input_switch_lock  &trans  &hm RSHIFT J  &hm RGUI K  &hm RALT L  &hm RCTRL SEMI  &trans
 &trans  &lp LG(Z) Z &lp LG(X) X &lp LG(C) C &lp LG(V) V  &trans                    &mt LCTRL HOME                  &mt RCTRL PG_UP         &trans   &trans    &trans  &trans  &trans  &kp RCTRL
 &trans  &trans       &trans     &trans      &trans       &trans            &trans  &mt LALT END                    &mt RALT PG_DN  &trans  &trans   &trans    &trans  &trans  &trans  &trans

            >;
        };

        layer_fn {
            bindings = <
 &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6         &tog KPAD &mo MOD  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans  &trans  &trans  &trans  &trans  &trans             &none   &none  &trans  &trans  &trans   &trans   &trans   &trans
 &trans  &trans  &trans  &trans  &trans  &trans             &none  &trans  &trans                   &trans   &trans    &none  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                    &trans                  &trans                     &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans   &trans   &trans   &trans  &trans  &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                             &none       &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &none
  &none         &none         &none         &none         &none            &none                       &bootloader  &bootloader         &none         &none            &none         &none         &none                   &none
  &none         &none         &none         &none         &none            &none            &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR         &none                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5   &none   &none   &none   &none   &none   &none
  &none         &none         &none         &none         &none            &none                                                        &none                                   &none                                      &none   &none   &none   &none   &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC  &rgb_ug RGB_TOG                        &bl BL_TOG        &none         &none    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_INC    &bl BL_DEC                   &none   &none   &none
            >;
        };

        layer_keypad {
            bindings = <
 &trans  &kp F1    &kp F2    &kp F3    &kp F4    &kp F5    &trans                                 &trans &trans  &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &trans
 &trans  &kp EXCL  &kp AT    &kp LBRC  &kp RBRC  &kp PIPE   &none                                 &none  &trans  &kp KP_N7  &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &trans
 &trans  &kp HASH  &kp DLLR  &kp LPAR  &kp RPAR  &kp GRAVE  &none  &trans  &trans  &trans  &trans &none  &trans  &kp KP_N4  &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &trans
 &trans  &kp PRCNT &kp CARET &kp LBKT  &kp RBKT  &kp TILDE         &trans  &trans                        &trans  &kp KP_N1  &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
 &trans  &trans    &trans    &trans    &trans    &trans    &trans  &trans  &trans  &trans     &kp KP_N0          &trans     &trans       &kp KP_DOT    &trans          &trans
            >;
        };
    };
};
